name: Terraform Multi-Environment Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy  # 添加 destroy 选项

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init -input=false

    - name: Setup Terraform Workspace
      run: |
        terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}
        echo "Current workspace: $(terraform workspace show)"

    - name: Validate tfvars File Exists
      run: |
        if [ ! -f "${{ github.event.inputs.environment }}.tfvars" ]; then
          echo "Error: ${{ github.event.inputs.environment }}.tfvars file not found!"
          exit 1
        fi
        echo "Using tfvars file: ${{ github.event.inputs.environment }}.tfvars"

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      run: |
        terraform plan \
          -var-file=${{ github.event.inputs.environment }}.tfvars \
          -out=tfplan

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: |
        terraform apply \
          -var-file=${{ github.event.inputs.environment }}.tfvars \
          -auto-approve

    - name: Terraform Destroy Plan
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform plan -destroy \
          -var-file=${{ github.event.inputs.environment }}.tfvars \
          -out=destroy-plan
        echo "Destroy plan generated. Review before proceeding."

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy \
          -var-file=${{ github.event.inputs.environment }}.tfvars \
          -auto-approve
      env:
        # 为 destroy 操作添加确认环境变量
        TF_CONFIRM_DESTROY: 1

    - name: Update Kubeconfig
      if: github.event.inputs.action == 'apply'
      run: |
        # 从 tfvars 文件中提取集群名称
        CLUSTER_NAME=$(grep 'cluster_name' ${{ github.event.inputs.environment }}.tfvars | awk -F'=' '{print $2}' | tr -d ' "')
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name $CLUSTER_NAME

    - name: Output Cluster Info
      if: github.event.inputs.action == 'apply'
      run: |
        terraform output -json > outputs.json
        echo "=== EKS Cluster Information ==="
        echo "Cluster Endpoint: $(terraform output -raw cluster_endpoint)"
        echo "Cluster Name: $(terraform output -raw cluster_name)"
        echo "Cluster Region: ${{ env.AWS_REGION }}"

    - name: Destroy Completion Message
      if: github.event.inputs.action == 'destroy'
      run: |
        echo "✅ Terraform destroy completed successfully"
        echo "All resources in environment '${{ github.event.inputs.environment }}' have been destroyed"